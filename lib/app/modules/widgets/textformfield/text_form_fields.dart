import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:privata/app/modules/widgets/textformfield/custom_dropdown_form_field.dart';
import 'package:privata/app/modules/widgets/textformfield/custom_dropdown_type_form_field.dart';

import 'package:privata/app/modules/widgets/textformfield/custom_textform_field.dart';

import '../../../../shared/shared_theme.dart';

abstract class TextFormFields {
  static Widget filled({
    required TextEditingController controller,
    required FocusNode focusNode,
    bool isRequired = false,
    String? initialValue,
    required String title,
    String? hintText,
    String? helperText,
    bool isAutoCorrect = false,
    String? errorText,
    bool isEnable = true,
    bool isLabel = false,
    bool isReadOnly = false,
    TextInputType keyboardType = TextInputType.text,
    int? maxLength,
    int? maxLines,
    bool obscureText = false,
    ValueChanged<String>? onChanged,
    ValueChanged<String?>? onFieldSubmitted,
    VoidCallback? onTap,
    IconData? prefixIcon,
    Widget? suffixIcon,
    bool? suffixIconState,
    String? suffixText,
    TextStyle? style,
    TextAlign textAlign = TextAlign.start,
    TextCapitalization textCapitalization = TextCapitalization.words,
    TextInputAction? textInputAction,
    FormFieldValidator<String>? validator,
    List<TextInputFormatter>? inputFormatters,
  }) {
    return CustomTextFormField(
      controller: controller,
      focusNode: focusNode,
      isRequired: isRequired,
      initialValue: initialValue,
      title: title,
      hintText: hintText,
      helperText: helperText,
      isFilled: true,
      isAutoCorrect: isAutoCorrect,
      errorText: errorText,
      isEnable: isEnable,
      isLabel: isLabel,
      isReadOnly: isReadOnly,
      keyboardType: keyboardType,
      maxLength: maxLength,
      maxLines: maxLines,
      obscureText: obscureText,
      onChanged: onChanged,
      onFieldSubmitted: onFieldSubmitted,
      onTap: onTap,
      prefixIcon: prefixIcon,
      suffixIcon: suffixIcon,
      suffixIconState: suffixIconState,
      suffixText: suffixText,
      style: style,
      textAlign: textAlign,
      textCapitalization: textCapitalization,
      textInputAction: textInputAction ?? TextInputAction.next,
      validator: validator,
      inputFormatters: inputFormatters,
    );
  }

  static Widget outlined({
    TextEditingController? controller,
    FocusNode? focusNode,
    bool isRequired = false,
    String? initialValue,
    required String title,
    String? hintText,
    String? helperText,
    bool isAutoCorrect = false,
    String? errorText,
    bool isEnable = true,
    bool isLabel = false,
    bool isReadOnly = false,
    TextInputType keyboardType = TextInputType.text,
    int? maxLength,
    int? maxLines,
    bool obscureText = false,
    ValueChanged<String>? onChanged,
    ValueChanged<String?>? onFieldSubmitted,
    VoidCallback? onTap,
    IconData? prefixIcon,
    Widget? suffixIcon,
    bool? suffixIconState,
    String? suffixText,
    TextStyle? style,
    TextAlign textAlign = TextAlign.start,
    TextCapitalization textCapitalization = TextCapitalization.words,
    TextInputAction? textInputAction,
    FormFieldValidator<String>? validator,
    List<TextInputFormatter>? inputFormatters,
  }) {
    return CustomTextFormField(
      controller: controller,
      focusNode: focusNode,
      isRequired: isRequired,
      initialValue: initialValue,
      title: title,
      hintText: hintText,
      helperText: helperText,
      isFilled: false,
      isAutoCorrect: isAutoCorrect,
      errorText: errorText,
      isEnable: isEnable,
      isLabel: isLabel,
      isReadOnly: isReadOnly,
      keyboardType: keyboardType,
      maxLength: maxLength,
      maxLines: maxLines,
      obscureText: obscureText,
      onChanged: onChanged,
      onFieldSubmitted: onFieldSubmitted,
      onTap: onTap,
      prefixIcon: prefixIcon,
      suffixIcon: suffixIcon,
      suffixIconState: suffixIconState,
      suffixText: suffixText,
      style: style,
      textAlign: textAlign,
      textCapitalization: textCapitalization,
      textInputAction: textInputAction ?? TextInputAction.next,
      validator: validator,
      inputFormatters: inputFormatters,
    );
  }

  static Widget otp({
    required TextEditingController controller,
    required FocusNode focusNode,
    TextInputAction? textInputAction,
    String? errorText,
    void Function(String)? onChanged,
    void Function(dynamic value)? onFieldSubmitted,
    bool isAutoFocus = false,
  }) {
    return CustomTextFormField(
      controller: controller,
      focusNode: focusNode,
      title: '',
      errorText: errorText,
      isFilled: false,
      keyboardType: TextInputType.number,
      textInputAction: textInputAction ?? TextInputAction.next,
      maxLength: 1,
      textAlign: TextAlign.center,
      onFieldSubmitted: onFieldSubmitted,
      onChanged: onChanged,
      style: const TextStyle(
        fontWeight: SharedTheme.bold,
      ),
      isAutoFocus: isAutoFocus,
    );
  }

  static Widget dropdown<T>({
    T? initialSelection,
    TextEditingController? controller,
    FocusNode? focusNode,
    double? width,
    bool isRequired = false,
    String? title,
    String? hintText,
    String? helperText,
    required List<DropdownMenuEntry<T>> items,
    bool isEnabled = true,
    bool isEnableFilter = false,
    bool isEnableSearch = true,
    bool isShowKeyboard = false,
    bool isFilled = true,
    bool isLabel = true,
    bool isExpanded = false,
    bool isDense = false,
    double? menuHeight,
    MenuStyle? menuStyle,
    Widget? leadingIcon,
    Widget? trailingIcon,
    String? errorText,
    TextStyle? textStyle,
    ValueChanged<T?>? onSelected,
    int? Function(List<DropdownMenuEntry<T>>, String)? searchCallback,
  }) {
    return CustomDropdownFormField(
      initialSelection: initialSelection,
      controller: controller,
      focusNode: focusNode,
      isRequired: isRequired,
      width: width,
      title: title ?? '',
      hintText: hintText,
      helperText: helperText,
      items: items,
      // items: items ??
      //     [
      //       const DropdownMenuEntry(
      //         value: 'null',
      //         label: 'Tidak ada data',
      //         enabled: false,
      //       )
      //     ],
      isEnabled: isEnabled,
      isEnableFilter: isEnableFilter,
      isEnableSearch: isEnableSearch,
      isShowKeyboard: isShowKeyboard,
      isFilled: isFilled,
      isLabel: isLabel,
      isExpanded: isExpanded,
      isDense: isDense,
      menuHeight: menuHeight,
      menuStyle: menuStyle,
      leadingIcon: leadingIcon,
      trailingIcon: trailingIcon,
      errorText: errorText,
      textStyle: textStyle,
      onSelected: onSelected,
      searchCallback: searchCallback,
    );
  }

  static Widget search({
    TextEditingController? controller,
    FocusNode? focusNode,
    bool isRequired = false,
    String? title,
    String? hintText,
    required List<DropdownMenuEntry<dynamic>>? items,
    bool isEnabled = true,
    bool isFetchData = false,
    Function(dynamic)? onSelected,
    int? Function(List<DropdownMenuEntry<dynamic>>, String)? searchCallback,
  }) {
    return CustomDropdownFormField(
      controller: controller,
      focusNode: focusNode,
      isRequired: isRequired,
      title: title ?? '',
      hintText: hintText,
      items: (items != null && items.isNotEmpty)
          ? items
          : [
              DropdownMenuEntry(
                value: 'null',
                label: 'Tidak ada data',
                labelWidget: (isFetchData)
                    ? const Center(
                        child: CircularProgressIndicator.adaptive(),
                      )
                    : null,
                enabled: false,
              )
            ],
      isEnabled: isEnabled,
      isEnableFilter: true,
      isEnableSearch: true,
      isShowKeyboard: true,
      isFilled: false,
      isLabel: true,
      isExpanded: true,
      leadingIcon: const Icon(Icons.search_rounded),
      trailingIcon: const SizedBox.shrink(),
      searchCallback: searchCallback,
      onSelected: onSelected,
    );
  }

  // static Widget bottomSheet<T>({
  //   BoxConstraints? constraints,
  //   TextEditingController? controller,
  //   FocusNode? focusNode,
  //   required String? title,
  //   required String? hintText,
  //   List<T>? items,
  //   Future<List<T>> Function(String)? asyncItems,
  //   String Function(T)? itemAsString,
  //   T? selectedItem,
  //   Function(T?)? onChanged,
  //   Widget? suffix,
  //   bool? isShowSearchBox,
  //   bool? isShowTitleBottomsheet,
  //   bool Function(T)? disabledItemFn,
  //   bool? isFilterOnline,
  //   Widget Function(BuildContext, T, bool)? itemBuilder,
  //   Widget Function(BuildContext, String)? loadingBuilder,
  //   Widget Function(BuildContext, String)? emptyBuilder,
  //   Widget Function(BuildContext, String, dynamic)? errorBuilder,
  // }) {
  //   return CustomDropdownTypeFormField<T>(
  //     controller: controller,
  //     focusNode: focusNode,
  //     title: title ?? '',
  //     hintText: hintText,
  //     items: items,
  //     asyncItems: asyncItems,
  //     itemAsString: itemAsString,
  //     selectedItem: selectedItem,
  //     onChanged: onChanged,
  //     suffix: suffix,
  //     isShowSearchBox: isShowSearchBox ?? false,
  //     isShowTitleBottomsheet: isShowTitleBottomsheet ?? true,
  //     constraints: constraints,
  //     disabledItemFn: disabledItemFn,
  //     isFilterOnline: isFilterOnline ?? false,
  //     emptyBuilder: emptyBuilder,
  //     errorBuilder: errorBuilder,
  //     itemBuilder: itemBuilder,
  //     loadingBuilder: loadingBuilder,
  //     type: TypeDropDown.bottomSheet,
  //     // isEnabled: isEnabled,
  //     // isEnableFilter: isEnableFilter,
  //     // isEnableSearch: isEnableSearch,
  //     // isShowKeyboard: isShowKeyboard,
  //     // isFilled: isFilled,
  //     // isLabel: isLabel,
  //     // isExpanded: isExpanded,
  //     // isDense: isDense,
  //     // menuHeight: menuHeight,
  //     // menuStyle: menuStyle,
  //     // leadingIcon: leadingIcon,
  //     // trailingIcon: trailingIcon,
  //     // errorText: errorText,
  //     // textStyle: textStyle,
  //     // onSelected: onSelected,
  //     // searchCallback: searchCallback,
  //   );
  // }

}
